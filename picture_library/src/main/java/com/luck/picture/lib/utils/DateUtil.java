package com.luck.picture.lib.utils;import android.text.TextUtils;import java.text.ParseException;import java.text.ParsePosition;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;/** * @author Chenli * @Date 2019/11/2 * @Description */public class DateUtil {    public static final String DATE_PATTERN_YMD_STANDARD = "yyyy-MM-dd";    public static final String DATE_PATTERN_YM = "yyyy-MM";    public static final String DATE_PATTERN_YM_CHINESE = "yyyy年MM月";    public static final String DATE_PATTERN_YMD_STANDARD_CHINESE = "yyyy年MM月dd日";    public static final String DATE_PATTERN_YMD_SIMPLE = "yyyyMMdd";    public static final String DATE_PATTERN_YMDHM = "yyyyMMdd HH:mm";    public static final String DATE_PATTERN_HM = "HH:mm";    public static final String DATE_PATTERN_HM_NO_COLON = "HHmm";    public static final String DATE_PATTERN_D = "dd";    public static final String DATE_PATTERN_HH = "HH";    public static final String DATE_PATTERN_MM = "mm";    //    public static final String DATE_PATTERN_MD = "MM-dd";    public static final String DATE_PATTERN_MDHM = "MM-dd HH:mm";    public static final String DATE_PATTERN_MDHM_DOT = "MM.dd HH:mm";    public static final String DATE_PATTERN_YMD = "yyyy.MM.dd";    public static final String DATE_PATTERN_MD = "MM.dd";    public static final String DATE_PATTERN_YMDHMS = "yyyy-MM-dd HH:mm:ss";    public static final String DATE_PATTERN_YMD_CHINESE_HMS = "yyyy年MM月dd日 HH:mm:ss";    public static final String DATE_PATTERN_yyyyMMddHHmmss = "yyyyMMddHHmmss";    public static final String DATE_PATTERN_YEAR_MONTH_DAY_HOUR_MINUTE = "yyyy-MM-dd HH:mm";    public static final String DATE_PATTERN_MONTH_DAY = "MM月dd日";    private static final long HOUR = 3600000;    private static final long MINUTE = 60000;    private static final long SECOND = 1000;    private static final String TAG = DateUtil.class.getSimpleName();    public static String getCurrentTimeGreetings(long timestamp) {        Date date = new Date();        date.setTime(timestamp);        int currHour = Integer.valueOf(formatDate(date, DATE_PATTERN_HH));        if (currHour >= 0 && currHour < 6) {            return "凌晨好！";        } else if (currHour >= 6 && currHour < 12) {            return "上午好！";        } else if (currHour >= 12 && currHour < 14) {            return "中午好！";        } else if (currHour >= 14 && currHour < 18) {            return "下午好！";        } else if (currHour >= 18 && currHour < 24) {            return "晚上好！";        }        return "";    }    /**     * 获取格式化后的日期     *     * @param date 输入的日期     * @return     */    public static String formatShortDate(Date date) {        if (date == null) {            return null;        }        SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD);        return dateFormat.format(date);    }    /**     * 获取时间戳（秒）     *     * @return     */    public static long getTime() {        return new Date().getTime() / 1000;    }    /**     * 获取星期几     *     * @param date 输入的日期     * @return     */    public static int getWeekOfDate(Date date) {        int wd = 0;        Calendar cd = Calendar.getInstance();        cd.setTime(date);        wd = cd.get(Calendar.DAY_OF_WEEK) - 1;        return wd;    }    private static String getDistanceString(long distance) {        if (distance < 60) {            return "1分钟前";        } else if (distance < 3600) {            return (distance / 60) + "分钟前";        } else if (distance < 86400) {            return (distance / 3600) + "小时前";        } else {            return (distance / 86400) + "天前";        }    }    public static String getDistance(String time, String format) {        SimpleDateFormat dateFormat = new SimpleDateFormat(format);        try {            Date parse = dateFormat.parse(time);            long distance = getTime() - parse.getTime() / 1000;            return getDistanceString(distance);        } catch (ParseException e) {            e.printStackTrace();        }        return "";    }    public static boolean isToday(String createTime) {        String create = handlerTimeToTime(createTime, DATE_PATTERN_YMDHMS, DATE_PATTERN_YMD_STANDARD);        String current = getCurrTime(DATE_PATTERN_YMD_STANDARD);        return create.equals(current);    }    public static String getDistance(long time) {        if (time == 0) {            time = getTime() - 1;        }        long distance = getTime() - time;        return getDistanceString(distance);    }    public static String getWeekDescOfDate(Date date) {        int week = getWeekOfDate(date);        return getWeekDayDesc("星期", week);    }    public static String getWeekDayDesc(String descBase, int weekOfDay) {        switch (weekOfDay) {            case 0:                return descBase + "日";            case 1:                return descBase + "一";            case 2:                return descBase + "二";            case 3:                return descBase + "三";            case 4:                return descBase + "四";            case 5:                return descBase + "五";            case 6:                return descBase + "六";            default:                return descBase + "日";        }    }    public static String handlerTimeToTime(String time, String before, String after) {        SimpleDateFormat sdf1 = new SimpleDateFormat(before);        SimpleDateFormat sdf2 = new SimpleDateFormat(after);        try {            Date date = sdf1.parse(time);            time = sdf2.format(date);        } catch (ParseException e) {            e.printStackTrace();        }        return time;    }    /**     * 获取两个日期之间的日期集合     *     * @param startDate     * @param endDate     * @return     */    public static List<String> getDatesOfBetween(String startDate, String endDate, String dateFormat) {        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);        List<String> list = new ArrayList<String>(); //保存日期集合        try {            Date date_start = sdf.parse(startDate);            Date date_end = sdf.parse(endDate);            Date date = date_start;            Calendar cd = Calendar.getInstance();//用Calendar 进行日期比较判断            while (date.getTime() <= date_end.getTime()) {                list.add(sdf.format(date));                cd.setTime(date);                cd.add(Calendar.DATE, 1);//增加一天 放入集合                date = cd.getTime();            }        } catch (ParseException e) {            e.printStackTrace();        }        //        LoggerUtil.e(TAG, startDate + "到" + endDate + "之间的日期有：" + list.toString());        return list;    }    public static String formatDate(Date date, String format) {        if (date == null) {            return null;        }        SimpleDateFormat dateFormat = new SimpleDateFormat(format);        return dateFormat.format(date);    }    /**     * @param dateTime 毫秒     * @param format     * @return     */    public static String formatDate(long dateTime, String format) {        SimpleDateFormat dateFormat = new SimpleDateFormat(format);        return dateFormat.format(dateTime);    }    public static int[] parseDateSplit(String text, String format) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(parseDate(text, format));        int[] split = new int[3];        split[0] = calendar.get(Calendar.YEAR);        split[1] = calendar.get(Calendar.MONTH) + 1;        split[2] = calendar.get(Calendar.DATE);        return split;    }    public static Date parseDate(String text, String format) {        Date date = null;        if (!TextUtils.isEmpty(text)) {            try {                date = new SimpleDateFormat(format).parse(text);            } catch (ParseException e) {                e.printStackTrace();            }        }        return date;    }    // 按输入的格式获取当前日期    public static String getCurrTime(String format) {        Calendar c = Calendar.getInstance();        SimpleDateFormat f = new SimpleDateFormat(format);        return f.format(c.getTime());    }    // 获取当天的日期    public static String getCurrDay() {        return getCurrTime(DATE_PATTERN_YMD_STANDARD);    }    // 获取当日是当月第几天    public static int getDay() {        Calendar c = Calendar.getInstance();        return c.get(Calendar.DAY_OF_MONTH);    }    // 获取当日是当月第几天    public static int getDay(Date date) {        Calendar c = Calendar.getInstance();        c.setTime(date);        return c.get(Calendar.DAY_OF_MONTH);    }    // 获取当月是当年第几个月    public static int getMonth() {        Calendar c = Calendar.getInstance();        return c.get(Calendar.MONTH) + 1;    }    public static int getYear() {        Calendar calendar = Calendar.getInstance();        return calendar.get(Calendar.YEAR);    }    public static int getYear(long date) {        Calendar calendar = Calendar.getInstance();        calendar.setTimeInMillis(date);        return calendar.get(Calendar.YEAR);    }    public static int getMonth(long date) {        Calendar calendar = Calendar.getInstance();        calendar.setTimeInMillis(date);        return calendar.get(Calendar.MONTH);    }    public static String getFormatMonth(int year, int month, String format) {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.YEAR, year);        calendar.set(Calendar.MONTH, month - 1);        calendar.set(Calendar.DATE, 1);        SimpleDateFormat f = new SimpleDateFormat(format);        return f.format(calendar.getTime());    }    public static String getFormatDay(int year, int month, int day) {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.YEAR, year);        calendar.set(Calendar.MONTH, month - 1);        calendar.set(Calendar.DATE, day);        SimpleDateFormat format = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD);        return format.format(calendar.getTime());    }    public static int getDayNumInMonth(int year, int month) {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.YEAR, year);        calendar.set(Calendar.MONTH, month - 1);        calendar.set(Calendar.DATE, 1);        return calendar.getActualMaximum(Calendar.DATE);    }    public static int getDayNumInMonth() {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.YEAR, getYear());        calendar.set(Calendar.MONTH, getMonth() - 1);        calendar.set(Calendar.DATE, 1);        return calendar.getActualMaximum(Calendar.DATE);    }    /**     * 判断time是否在beginTime和endTime之间。包含beginTime。不包含endTime     *     * @param time     * @param beginTime     * @param endTime     * @param format     * @return     */    public static boolean checkTimeBetweenPeriod(String time, String beginTime, String endTime, String format) {        return time.equals(beginTime) || after(time, beginTime, format) && before(time, endTime, format);    }    /**     * 判断firstDateStr在secondDateStr之前     *     * @param firstDateStr     * @param secondDateStr     * @param format     * @return     */    public static boolean before(String firstDateStr, String secondDateStr, String format) {        Date firstDate = parseDate(firstDateStr, format);        Date secondDate = parseDate(secondDateStr, format);        return firstDate.before(secondDate);    }    /**     * 判断firstDateStr在secondDateStr之后     *     * @param firstDateStr     * @param secondDateStr     * @param format     * @return     */    public static boolean after(String firstDateStr, String secondDateStr, String format) {        Date firstDate = parseDate(firstDateStr, format);        Date secondDate = parseDate(secondDateStr, format);        return firstDate.after(secondDate);    }    /**     * 获取本月的天数     *     * @return 本月的天数     */    public static int getDaysOfTheMonth() {        Calendar calendar = Calendar.getInstance(Locale.CHINA);        return calendar.getActualMaximum(Calendar.DATE);    }    public static int getToday() {        Calendar calendar = Calendar.getInstance();        return calendar.get(Calendar.DAY_OF_MONTH);    }    /**     * 获取这个礼拜的开始和结束时间（从周一开始）Standard格式     *     * @return     */    public static String[] getDayWeek() {        return getDayWeek(DATE_PATTERN_YMD_STANDARD);    }    /**     * @param dateFormat     * @param dayNum     * @return     */    public static String getDayByTodayBefore(String dateFormat, int dayNum) {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.DATE, calendar.get(Calendar.DAY_OF_MONTH) - dayNum);        SimpleDateFormat format = new SimpleDateFormat(dateFormat);        return format.format(calendar.getTime());    }    /**     * @param dateFormat     * @param dayNum     * @return     */    public static String getDayByTodayAfter(String dateFormat, int dayNum) {        Calendar calendar = Calendar.getInstance();        calendar.set(Calendar.DATE, calendar.get(Calendar.DAY_OF_MONTH) + dayNum);        SimpleDateFormat format = new SimpleDateFormat(dateFormat);        return format.format(calendar.getTime());    }    /**     * @param dateFormat     * @param dayNum     * @return     */    public static String getDayByDayBefore(String date, String dateFormat, int dayNum) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(parseDate(date, dateFormat));        calendar.set(Calendar.DATE, calendar.get(Calendar.DAY_OF_MONTH) - dayNum);        SimpleDateFormat format = new SimpleDateFormat(dateFormat);        return format.format(calendar.getTime());    }    /**     * @param dateFormat     * @param dayNum     * @return     */    public static String getDayByDayAfter(String date, String dateFormat, int dayNum) {        Calendar calendar = Calendar.getInstance();        calendar.setTime(parseDate(date, dateFormat));        calendar.set(Calendar.DATE, calendar.get(Calendar.DAY_OF_MONTH) + dayNum);        SimpleDateFormat format = new SimpleDateFormat(dateFormat);        return format.format(calendar.getTime());    }    /**     * 获取从今天往前数dayNum天的日期集合     *     * @param dateFormat     * @param dayNum     * @return     */    public static List<String> getDayListByToday(String dateFormat, int dayNum) {        List<String> dayList = new ArrayList<>();        for (int i = 0; i < dayNum; i++) {            dayList.add(0, getDayByTodayBefore(dateFormat, i));        }        return dayList;    }    /**     * 获取这个礼拜的开始和结束时间（从周一开始）     *     * @param dateFormat     * @return     */    public static String[] getDayWeek(String dateFormat) {        Calendar c = Calendar.getInstance();        SimpleDateFormat format = new SimpleDateFormat(dateFormat);        c.setFirstDayOfWeek(Calendar.MONDAY);        c.set(Calendar.HOUR_OF_DAY, 0);        c.set(Calendar.MINUTE, 0);        c.set(Calendar.SECOND, 0);        c.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);        String startTime = format.format(c.getTime());        c = Calendar.getInstance();        c.setFirstDayOfWeek(Calendar.MONDAY);        c.set(Calendar.HOUR_OF_DAY, 23);        c.set(Calendar.MINUTE, 59);        c.set(Calendar.SECOND, 59);        c.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);        String endTime = format.format(c.getTime());        return new String[]{startTime, endTime};    }    /**     * 获取当月的开始和结束时间     *     * @return     */    public static String[] getDayMonth() {        Calendar c = Calendar.getInstance();        SimpleDateFormat format = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD);        c.add(Calendar.MONTH, 0);        c.set(Calendar.DAY_OF_MONTH, 1);// 设置为1号,当前日期既为本月第一天        String startTime = format.format(c.getTime());        c = Calendar.getInstance();        c.set(Calendar.DAY_OF_MONTH,                c.getActualMaximum(Calendar.DAY_OF_MONTH));        String endTime = format.format(c.getTime());        return new String[]{startTime, endTime};    }    /**     * 获取这个月的开始和结束时间     *     * @return     */    public static String[] getDayMonth(String date, String dateFormat) {        Calendar c = Calendar.getInstance();        c.setTime(parseDate(date, dateFormat));        SimpleDateFormat format = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD);        c.add(Calendar.MONTH, 0);        c.set(Calendar.DAY_OF_MONTH, 1);// 设置为1号,当前日期既为本月第一天        String startTime = format.format(c.getTime());        c = Calendar.getInstance();        c.set(Calendar.DAY_OF_MONTH,                c.getActualMaximum(Calendar.DAY_OF_MONTH));        String endTime = format.format(c.getTime());        return new String[]{startTime, endTime};    }    public static final String MAP_KEY_START = "start";    public static final String MAP_KEY_END = "end";    public static final String DATE_HMS_BEGIN = " 00:00:00";    public static final String DATE_HMS_END = " 23:59:59";    // 获取开始和结束时间(时间选择控件)    public static HashMap<String, String> getStartAndEndDate(int position) {        String s = "";        String e = "";        switch (position) {            case 0:// 全部                break;            case 1:                String text = getCurrDay();                s = text;                e = text;                break;            case 2:// 当周                String[] args = getDayWeek();                s = args[0];                e = args[1];                break;            case 3:// 当月                String[] args1 = getDayMonth();                s = args1[0];                e = args1[1];                break;        }        HashMap<String, String> map = new HashMap<>();        if (TextUtils.isEmpty(s))            s = "1900-01-01";        if (TextUtils.isEmpty(e))            e = "2200-12-30";        map.put(MAP_KEY_START, s + DATE_HMS_BEGIN);        map.put(MAP_KEY_END, e + DATE_HMS_END);        return map;    }    public static String parseTimeToStr(long time) {        int hour = (int) (time / HOUR);        int minute = (int) ((time % HOUR) / MINUTE);        int second = (int) (((time % HOUR) % MINUTE) / SECOND);        return hour + "小时" + minute + "分" + second + "秒";    }    public static String formatDate(long time) {        SimpleDateFormat sdf = new SimpleDateFormat(DATE_PATTERN_YMDHMS);        Date date = new Date();        date.setTime(time);        return sdf.format(date);    }    /**     * 处理时间     *     * @param dateText 2019-12-12 12:12:12     * @return     */    public static String handlerPubDate(String dateText) {        if (!TextUtils.isEmpty(dateText)) {            try {                SimpleDateFormat sdfY = new SimpleDateFormat("yyyy");                // 获取给出时间的信息                Date date = new SimpleDateFormat(DATE_PATTERN_YMDHMS).parse(dateText);                Calendar ca = Calendar.getInstance();                ca.setTime(date);                //先获取年份                int year = Integer.valueOf(sdfY.format(date));                //获取一年中的第几天                int day = ca.get(Calendar.DAY_OF_YEAR);                //获取当前年份 和 一年中的第几天                Date currentDate = new Date(System.currentTimeMillis());                Calendar caCurr = Calendar.getInstance();                caCurr.setTime(currentDate);                int currentYear = Integer.valueOf(sdfY.format(currentDate));                int currentDay = caCurr.get(Calendar.DAY_OF_YEAR);                String hintDate = "";                //计算 如果是去年的                if (currentYear - year == 1) {                    //如果当前正好是 1月1日 计算去年有多少天，指定时间是否是一年中的最后一天                    if (currentDay == 1) {                        int yearDay;                        if (year % 400 == 0) {                            yearDay = 366;//世纪闰年                        } else if (year % 4 == 0 && year % 100 != 0) {                            yearDay = 366;//普通闰年                        } else {                            yearDay = 365;//平年                        }                        if (day == yearDay - 1) {                            hintDate = "前天";                        } else if (day == yearDay) {                            hintDate = "昨天";                        }                    }                } else {                    if (currentDay - day == 2) {                        hintDate = "前天";                    } else if (currentDay - day == 1) {                        hintDate = "昨天";                    } else if (currentDay - day == 0) {                        hintDate = "今天";                    }                }                if (TextUtils.isEmpty(hintDate)) {                    return dateText;                } else {                    return hintDate + " " + new SimpleDateFormat("HH:mm:ss").format(date);                }            } catch (Exception e) {                e.printStackTrace();            }        }        return dateText;    }    /**     * 获得指定日期的前n天     *     * @param specifiedDay     * @return     * @throws Exception     */    public static String getSpecifiedDayBefore(String specifiedDay, int days) {        //SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");        Calendar c = Calendar.getInstance();        Date date = null;        try {            date = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD).parse(specifiedDay);        } catch (ParseException e) {            e.printStackTrace();        }        c.setTime(date);        c.add(Calendar.DATE, -days);        String dayBefore = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD).format(c.getTime());        return dayBefore;    }    /**     * 获得指定日期的后一天     *     * @param specifiedDay     * @return     */    public static String getSpecifiedDayAfter(String specifiedDay) {        Calendar c = Calendar.getInstance();        Date date = null;        try {            date = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD).parse(specifiedDay);        } catch (ParseException e) {            e.printStackTrace();        }        c.setTime(date);        int day = c.get(Calendar.DATE);        c.set(Calendar.DATE, day + 1);        String dayAfter = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD).format(c.getTime());        return dayAfter;    }    /**     * 将长时间格式字符串转换为时间 yyyy-MM-dd HH:mm:ss     *     * @param strDate     * @return     */    public static String strToDateLong(String strDate) {        if (TextUtils.isEmpty(strDate)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat(DATE_PATTERN_YMDHMS);        ParsePosition pos = new ParsePosition(0);        Date strtodate = formatter.parse(strDate, pos);        return dateToStrLong(strtodate);    }    public static String strToDate(String strDate) {        if (TextUtils.isEmpty(strDate)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat(DATE_PATTERN_YMDHMS);        ParsePosition pos = new ParsePosition(0);        Date strtodate = formatter.parse(strDate, pos);        formatter = new SimpleDateFormat(DATE_PATTERN_MONTH_DAY);        return formatter.format(strtodate) + "  " + getWeekDescOfDate(strtodate);    }    /**     * 将长时间格式字符串转换为时间 yyyy-MM-dd HH:mm:ss     *     * @param strDate     * @return     */    public static String articToDateLong(String strDate) {        if (TextUtils.isEmpty(strDate)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat(DATE_PATTERN_YEAR_MONTH_DAY_HOUR_MINUTE);        ParsePosition pos = new ParsePosition(0);        Date strtodate = formatter.parse(strDate, pos);        return dateToStrLong(strtodate);    }    /**     * 将长时间格式字符串转换为时间 MM.DD     *     * @param strDate     * @return     */    public static String strToDateLongMD(String strDate) {        if (TextUtils.isEmpty(strDate)) {            return "";        }        SimpleDateFormat formatter = new SimpleDateFormat(DATE_PATTERN_YMDHMS);        ParsePosition pos = new ParsePosition(0);        Date strtodate = formatter.parse(strDate, pos);        Calendar calendar = Calendar.getInstance();        calendar.setTime(strtodate);        formatter = new SimpleDateFormat(DATE_PATTERN_MD);        String dateString = formatter.format(strtodate);        return dateString;    }    /**     * yyyy-MM-dd HH:mm:ss 转 yyyy-MM-dd HH:mm     *     * @param strDate     * @return     */    public static String dateFormatHm(String strDate) {        SimpleDateFormat formatter = new SimpleDateFormat(DATE_PATTERN_YMDHMS);        ParsePosition pos = new ParsePosition(0);        Date dateDate = formatter.parse(strDate, pos);        Calendar calendar = Calendar.getInstance();        calendar.setTime(dateDate);        SimpleDateFormat sformatter = new SimpleDateFormat(DATE_PATTERN_YEAR_MONTH_DAY_HOUR_MINUTE);        String dateString = sformatter.format(dateDate);        return dateString;    }    /**     * 将长时间格式时间转换为字符串 yyyy.MM.dd     *     * @param dateDate     * @return     */    public static String dateToStrLong(Date dateDate) {        SimpleDateFormat formatter;        Calendar calendar = Calendar.getInstance();        calendar.setTime(dateDate);        if (calendar.get(Calendar.YEAR) < getYear()) {            formatter = new SimpleDateFormat(DATE_PATTERN_YMD);        } else {            formatter = new SimpleDateFormat(DATE_PATTERN_MDHM_DOT);        }        String dateString = formatter.format(dateDate);        return dateString;    }    /**     * xxfff add     * (年月日)日期比较大小，判断是否大于当前日期     *     * @param currentDate 当前选择的日期     * @param isMoreThan  true 为不得大于当前日期，false 为必须大于当前日期     * @return （isMoreThan=true result=-1 表示选择日期大于当前日期,result=0 表示日期相等,result=1 表示选择日期小于当前日期）     * （isMoreThan=false result=-1 表示选择日期小于当前日期,result=0 表示日期相等,result=1 表示选择日期大于当前日期）     * result = -2 表示日期格式错误     */    public static int dateCompare(String currentDate, boolean isMoreThan) {        String s1 = currentDate;        String s2 = getCurrTime(DATE_PATTERN_YEAR_MONTH_DAY_HOUR_MINUTE);        java.text.DateFormat df = new SimpleDateFormat(DATE_PATTERN_YEAR_MONTH_DAY_HOUR_MINUTE);        Calendar c1 = Calendar.getInstance();        Calendar c2 = Calendar.getInstance();        int result;        try {            c1.setTime(df.parse(s1));            c2.setTime(df.parse(s2));            if (isMoreThan == true) {                result = c2.compareTo(c1);            } else {                result = c1.compareTo(c2);            }        } catch (ParseException e) {            result = -2;            e.printStackTrace();        }        return result;    }    /**     * xxfff add     * (年月日)日期比较大小，判断是否大于当前日期     *     * @param date1     * @param isMoreThan  true 为不得大于当前日期，false 为必须大于当前日期     * @return （isMoreThan=true result=-1 表示选择日期大于当前日期,result=0 表示日期相等,result=1 表示选择日期小于当前日期）     * （isMoreThan=false result=-1 表示选择日期小于当前日期,result=0 表示日期相等,result=1 表示选择日期大于当前日期）     * result = -2 表示日期格式错误     */    public static int dateCompare(String date1,String date2, boolean isMoreThan) {        String s1 = date1;        String s2 = date2;        java.text.DateFormat df = new SimpleDateFormat(DATE_PATTERN_YMD_STANDARD);        Calendar c1 = Calendar.getInstance();        Calendar c2 = Calendar.getInstance();        int result;        try {            c1.setTime(df.parse(s1));            c2.setTime(df.parse(s2));            if (isMoreThan == true) {                result = c2.compareTo(c1);            } else {                result = c1.compareTo(c2);            }        } catch (ParseException e) {            result = -2;            e.printStackTrace();        }        return result;    }}